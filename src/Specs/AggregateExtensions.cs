using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Domain;
using ExpectedObjects;
using Machine.Specifications;

namespace Specs
{
    public static class AggregateExtensions
    {
        public static void ShouldRaiseEvents(this AggregateRoot root, params Event[] expectedEvents)
        {
            var eventStream = root.GetUncommittedEvents();
            eventStream.Count.ShouldEqual(expectedEvents.Length);
            var comparisons = expectedEvents.Zip(eventStream, (expected, actual) =>
                new { Expected = expected, Actual = actual as Event });

            foreach (var comparison in comparisons)
            {
                var expected = comparison.Expected;
                var actual = comparison.Actual;

                //Assert IEvent props
                actual.AggregateId.ShouldEqual(root.Id);
                actual.EventId.ShouldNotEqual(Guid.Empty);
                actual.Timestamp.ShouldBeCloseTo(DateTime.UtcNow, TimeSpan.FromMilliseconds(100));

                //HACK: Copy those to expected since they are generated by the Aggregate
                expected.AggregateId = actual.AggregateId;
                expected.EventId = actual.EventId;
                expected.Timestamp = actual.Timestamp;

                expected.ToExpectedObject()
                    .ShouldMatch(actual);
            }
        }

        public static void ShouldNotRaiseEvents(this AggregateRoot root)
        {
            root.GetUncommittedEvents().ShouldBeEmpty();
        }
    }
}

